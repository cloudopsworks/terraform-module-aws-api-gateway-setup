name: Terraform API Gateway Basic setup
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-api-gateway-setup

description: |-
  Terraform module for AWS API Gateway that provides a comprehensive setup for both REST API (v1) and HTTP API (v2) with enterprise-grade features and security configurations. Key features include:

  API Types and Endpoints:
  - REST API (v1) with regional and edge-optimized endpoints
  - HTTP API (v2) for enhanced performance and cost optimization
  - Multiple domain configurations per API Gateway instance
  - Custom domain management with automated DNS configuration

  Security Features:
  - Mutual TLS (mTLS) authentication support
  - TLS 1.2 security policy enforcement
  - VPC Link integration for private endpoints
  - Cross-account certificate management
  - ACM certificate integration

  Infrastructure Features:
  - Automated CloudWatch logging setup
  - Regional and edge endpoint optimization
  - IPv4 and dual-stack support
  - Multiple domain configurations
  - VPC Link integration for private APIs
  - Load balancer integration support
  - Custom domain management
  - Cross-account capabilities

  Monitoring and Management:
  - CloudWatch logging integration
  - Automated IAM role configuration
  - Comprehensive tagging system
  - Alert configuration support

# Introduction to the project
introduction: |-
  This Terraform module provides a comprehensive setup for AWS API Gateway with advanced configurations and security features. It offers:

  API Gateway Support:
  - REST API (v1) with regional and edge-optimized endpoints
  - HTTP API (v2) with enhanced performance and lower latency
  - Multiple domain configurations per API Gateway instance

  Security Features:
  - Custom domain names with TLS 1.2 security policies
  - Mutual TLS (mTLS) authentication support for HTTP APIs
  - ACM certificate integration with cross-account support
  - VPC Link integration for secure private network access

  Infrastructure Management:
  - Automated CloudWatch logging role configuration
  - IAM role and policy management for API Gateway services
  - Flexible endpoint configuration (REGIONAL/EDGE)
  - IPv4 and dual-stack IP address support
  - Comprehensive resource tagging system

  Integration Capabilities:
  - VPC Link setup for REST API private integrations
  - HTTP API VPC Link with security group and subnet configuration
  - Cross-account certificate management
  - Multiple domain and subdomain management

# How to use this project
usage: |-
  To use this module, include it in your Terraform configuration with the required variables:

  ```hcl
  module "api_gateway" {
    source = "cloudopsworks/api-gateway-setup/aws"
  
    # General Configuration
    name_prefix  = "myapi"        # Prefix for resource names
    system_name = "production"    # System identifier
    domain_zone = "example.com"   # Base domain for API endpoints

    # Domain Configurations
    apigw_domains = [
      # REST API (v1) Configuration
      {
        domain_name         = "api"          # Subdomain name: api.example.com
        version            = 1              # REST API version
        endpoint_type      = "REGIONAL"     # REGIONAL or EDGE
        security_policy    = "TLS_1_2"     # TLS security policy
        acm_certificate_arn = null         # Optional specific certificate
        ip_address_type    = "IPV4"       # IPv4 or DUAL
      },
      # HTTP API (v2) Configuration with mTLS
      {
        domain_name         = "dev-api"     # Subdomain name: dev-api.example.com
        version            = 2              # HTTP API version
        endpoint_type      = "REGIONAL"     # REGIONAL endpoint type
        security_policy    = "TLS_1_2"     # TLS security policy
        acm_certificate_arn = null         # Use default certificate
        ip_address_type    = "IPV4"       # IPv4 address type
        mutual_tls         = {
          truststore_uri     = "s3://bucket-name/key"  # S3 URI for truststore
          truststore_version = "1.0"                   # Truststore version
        }
      }
    ]

    # SSL/TLS Configuration
    acm_certificate_arn    = "arn:aws:acm:region:account:certificate/xxx"

    # Logging Configuration
    cloudwatch_role_enabled = true     # Enable CloudWatch logging

    # Endpoint Configuration
    endpoint_config_types   = ["REGIONAL"]  # REGIONAL or EDGE

    # VPC Link Configuration (REST API)
    rest_vpc_link_arn      = "arn:aws:elasticloadbalancing:region:account:loadbalancer/net/name/id"

    # VPC Link Configuration (HTTP API)
    http_vpc_link = {
      name               = "http-vpc-link"
      subnet_ids         = ["subnet-xxx", "subnet-yyy"]
      security_group_ids = ["sg-xxx"]
    }

    # Optional Cross-Account Configuration
    cross_account = false    # Enable cross-account certificate management
  }
  ```

  Variable Definitions:

  ```yaml
  name_prefix:
    description: Prefix for resource names
    type: string
    required: true

  system_name:
    description: System identifier for tagging
    type: string
    required: true

  domain_zone:
    description: Base domain for API endpoints
    type: string
    required: true

  apigw_domains:
    description: List of API Gateway domain configurations
    type: list(object)
    required: true
    properties:
      domain_name:
        description: Subdomain name
        type: string
        required: true
      version:
        description: API version (1 for REST, 2 for HTTP)
        type: number
        default: 1
      endpoint_type:
        description: REGIONAL or EDGE
        type: string
        default: REGIONAL
      security_policy:
        description: TLS version
        type: string
        default: TLS_1_2
      acm_certificate_arn:
        description: Specific ACM certificate ARN
        type: string
        optional: true
      ip_address_type:
        description: IPv4 or DUAL
        type: string
        default: IPV4
      mutual_tls:
        description: mTLS configuration
        type: map
        optional: true
        properties:
          truststore_uri:
            description: S3 URI for truststore
            type: string
          truststore_version:
            description: Truststore version
            type: string

  acm_certificate_arn:
    description: Default ACM certificate ARN
    type: string
    required: true

  cloudwatch_role_enabled:
    description: Enable CloudWatch logging
    type: bool
    default: true

  endpoint_config_types:
    description: List of endpoint types
    type: list(string)
    default: ["REGIONAL"]

  rest_vpc_link_arn:
    description: VPC Link ARN for REST API
    type: string
    optional: true

  http_vpc_link:
    description: VPC Link configuration for HTTP API
    type: map
    optional: true
    properties:
      name:
        description: VPC Link name
        type: string
      subnet_ids:
        description: List of subnet IDs
        type: list(string)
      security_group_ids:
        description: List of security group IDs
        type: list(string)

  cross_account:
    description: Enable cross-account certificate management
    type: bool
    default: false
  ```

# Example usage
examples: |-
  Terragrunt implementation examples:

  Basic setup with REST API (v1):
  ```hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "cloudopsworks/api-gateway-setup/aws"
  }

  dependency "acm" {
    config_path = "../acm"
  }

  dependency "nlb" {
    config_path = "../nlb"
  }
  
  # Generate global cross_account provider block
  generate "provider_l" {
    path = "provider.l.tf"
    #   disable     = !local.cross_account
    if_exists   = "overwrite_terragrunt"
    if_disabled = "remove_terragrunt"
    contents    = <<EOF
    provider "aws" {
      alias = "${local.cross_account_alias}"
      region = "${local.cross_account_region}"
      assume_role {
        role_arn     = "${local.cross_account_sts_role_arn}"
        session_name = "terragrunt"
      }
    }
    EOF
  }

  inputs = {
    name_prefix           = "customer"
    system_name          = "staging"
    domain_zone          = "api.example.com"
    apigw_domains        = [
      {
        domain_name         = "v1"
        version            = 1
        endpoint_type      = "REGIONAL"
        security_policy    = "TLS_1_2"
        acm_certificate_arn = null
      }
    ]
    acm_certificate_arn    = dependency.acm.outputs.certificate_arn
    cloudwatch_role_enabled = true
    endpoint_config_types   = ["REGIONAL"]
    rest_vpc_link_arn      = dependency.nlb.outputs.lb_arn
    tags = {
      Environment = "staging"
      Project     = "customer-api"
    }
  }
  ```

  HTTP API (v2) with mutual TLS:
  ```hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "cloudopsworks/api-gateway-setup/aws"
  }

  dependency "acm" {
    config_path = "../acm"
  }

  inputs = {
    name_prefix           = "customer"
    system_name          = "staging"
    domain_zone          = "api.example.com"
    apigw_domains        = [
      {
        domain_name         = "v2"
        version            = 2
        endpoint_type      = "REGIONAL"
        security_policy    = "TLS_1_2"
        acm_certificate_arn = null
        ip_address_type    = "IPV4"
        mutual_tls         = {
          truststore_uri     = "s3://bucket-name/key"
          truststore_version = "1.0"
        }
      }
    ]
    acm_certificate_arn    = dependency.acm.outputs.certificate_arn
    cloudwatch_role_enabled = true
    endpoint_config_types   = ["REGIONAL"]
    http_vpc_link         = [{
      name               = "http-vpc-link"
      subnet_ids         = dependency.vpc.outputs.private_subnets
      security_group_ids = [dependency.sg.outputs.security_group_id]
    }]
    tags = {
      Environment = "staging"
      Project     = "customer-api"
    }
  }
  ```

# How to get started quickly
quickstart: |-
  1. Add the module to your Terraform configuration:
     ```hcl
     module "api_gateway" {
       source  = "cloudopsworks/api-gateway-setup/aws"
       version = "1.0.0"
     }
     ```

  2. Configure required variables:
     - name_prefix: Prefix for resource names (e.g., "myapi")
     - system_name: System identifier (e.g., "production")
     - domain_zone: Base domain for API endpoints (e.g., "api.example.com")
     - apigw_domains: List of domain configurations with:
       - domain_name: Subdomain name
       - version: API Gateway version (1 for REST, 2 for HTTP)
       - endpoint_type: REGIONAL or EDGE
       - security_policy: TLS version
       - acm_certificate_arn: Optional certificate ARN
       - ip_address_type: IPV4 or DUAL
       - mutual_tls: Optional mTLS configuration
     - acm_certificate_arn: Default SSL certificate ARN
     - cloudwatch_role_enabled: Enable CloudWatch logging
     - endpoint_config_types: List of endpoint types
     - rest_vpc_link_arn: Optional VPC Link for REST API
     - http_vpc_link: Optional VPC Link for HTTP API

  3. For Terragrunt setup:
     - Create terragrunt.hcl in your module directory
     - Configure dependencies for ACM, VPC, etc.
     - Set environment-specific variables

  4. Initialize and apply:
     ```bash
     # For Terraform
     terraform init
     terraform plan
     terraform apply

     # For Terragrunt
     terragrunt init
     terragrunt plan
     terragrunt apply
     ```

  5. Access your API endpoints using the generated domain names

  6. Optional configurations:
     - Set up mutual TLS authentication
     - Configure VPC links for private integrations
     - Enable CloudWatch logging
     - Configure custom domain names

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"